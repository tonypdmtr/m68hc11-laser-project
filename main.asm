*NAMES: RENE MOISE KWIBUKA & DAVID BURMEIER
*START DATE SOFTWARE : OCTOBER 10, 2015.
*END DATE SOFTWARE: 	NOVEMBER 05, 2015
*START DATE HARDWARE: JANUARY 4TH, 2016.
*END DATE HARDWARE	MARCH 10TH, 2016
*EDITED ALONG WITH HARDWARE CONSTRUCTION: JAN - MARCH 2016

*THIS PROGRAM IS A LASER PROJECT PROGRAM

****************************************************************************************
*******				START OF THE PROGRAM	    ********
****************************************************************************************

       ORG	$E000	WHERE TO STORE THE PROGRAM (BENEFIT OF ASSEMBLER)

****************************************************************************************
*******				DEFINE CONSTANTS		   ********
****************************************************************************************
COUNTER		EQU	$10		COUNTER
SHIFT_VAL	EQU     18		SHIFT MAX VALUE
BUFFER		EQU	$20		BUFFER LOCATION
MODE_L		EQU	$30		MODE LOCATION
SHIFT_L		EQU	$40		SHIFT LOCATION
X_OFFSET	EQU	$50		X_OFFSET LOCATION.
MULTLASSTR	EQU	$60		WHEN MULTIPLYING BY 32, WE NEED THIS LOCATION
DELCOUNT	EQU	$70		DELAY COUNTER HOLDER
STACK		EQU	$FF		STACK VALUE
OFF		EQU	$A000		LASER OFF
ON		EQU	$A001		LASER ON
PIA_DDRA	EQU	$B000		PIA DDRA
PIA_CRA		EQU	$B001		PIA CRA
PIA_DDRB	EQU	$B002		PIA DRRB
PIA_CRB		EQU	$B003		PIA CRB
REG_0		EQU	$C000		INITIALIZE LCD REGISTER 0
REG_1		EQU	$C001		SET LCD REGISTER 1
KEYBD		EQU	$D000		KEYBOARD INPUT
ASCII_TABLE	EQU 	$F000		ASCII TABLE LOCATION
MODE_3_STR	EQU	$F900		MODE 3 STRING LOCATION
D_ACONV		EQU	$1039		OPTION
ST_REG		EQU	$1030		A/D CONTROL/STATUS REGISTER
ADR_READ	EQU	$1031		READ CONVERTED ANALOG FROM HERE
MODE4_PATTERN	EQU 	$F4C0		MODE_4 LOCATION

****************************************************************************************
*******				CHARACTERS LOCATION		   ********
****************************************************************************************

DIG_0	EQU	$F040	Digit 0 to Digit 9 sequentially.
DIG_1	EQU	$F060
DIG_2	EQU	$F080
DIG_3	EQU	$F0A0
DIG_4	EQU	$F0C0
DIG_5	EQU	$F0E0
DIG_6	EQU	$F100
DIG_7	EQU	$F120
DIG_8	EQU	$F140
DIG_9	EQU	$F160
LET_A	EQU	$F180	Letter A through Letter z
LET_B	EQU	$F1A0
LET_C	EQU	$F1C0
LET_D	EQU	$F1E0
LET_E	EQU	$F200
LET_F	EQU	$F220
LET_G	EQU	$F240
LET_H	EQU	$F260
LET_I	EQU	$F280
LET_J	EQU	$F2A0
LET_K	EQU	$F2C0
LET_L	EQU	$F2E0
LET_M	EQU	$F300
LET_N	EQU	$F320
LET_O	EQU	$F340
LET_P	EQU	$F360
LET_Q	EQU	$F380
LET_R	EQU	$F3A0
LET_S	EQU	$F3C0
LET_T	EQU	$F3E0
LET_U	EQU	$F400
LET_V	EQU	$F420
LET_W	EQU	$F440
LET_X	EQU	$F460
LET_Y	EQU	$F480
LET_Z	EQU	$F4A0

****************************************************************************************
*******				INITIALIZATION					********
*Since we are using subroutines and interrupts, some initializations are a must.
*Among them are to clear index, initialize the stack,and initialize the buffer.
****************************************************************************************`
	CLI			CLEAR INTERRUPT INDEX
	CLR	MODE_L		CLEAR MODE
       	INC	MODE_L		MAKE MODE 1
	CLR	SHIFT_L		CLEAR SHIFT VALUE HOLDER
	CLR	X_OFFSET	CLEAR	X_OFFSET
	LDS	#STACK		INITIALIZE THE STACK POINTER
	LDAA	#$FF		LOAD A WITH FF
	LDY	#BUFFER		LOAD Y WITH BUFFER STARTING LOCATION
	STAA	BUFFER		STORE FF AT BUFFER
	STAA	BUFFER+1 	STORE FF AT BUFFER
	STAA	BUFFER+2	STORE FF AT BUFFER
	STAA	BUFFER+3	STORE FF AT BUFFER

*******			INITIALIZATION LCD		     ********

		JSR		INIT_LCD	jump to subroutine init lcd
		BRA		PIA_INIT	branch to pia and follow up to main

INIT_LCD
** INITIALIZING THE ADPU bit 7 ($1039). Allow 100 us before initializing another command.

		LDX		#D_ACONV			load x with $1039.
		BSET		0,X 	%10000000		SET BIT 7 OF DIG ANAL CONVER

       		LDX		#REG_0				LOAD X WITH REG_0 VALUE
HERE1		BRSET		0,X	$80	HERE1		BRANCH BACK HERE IF BF = 1
		LDAA		#$01				LOAD A WITH $01
		STAA		REG_0				STORE IN REG_0

HERE2 	BRSET			0,X	$80	HERE2 		BRANCH BACK HERE IF BF = 1
		LDAA		#$30				LOAD A WITH $30
		STAA		REG_0				STORE IN REG_0

HERE3		BRSET		0,X	$80	HERE3		BRANCH BACK HERE IF BF = 1
		LDAA		#$08				LOAD A WITH $08
		STAA		REG_0				STORE IN REG_0

HERE4		BRSET		0,X	$80	HERE4		BRANCH BACK HERE IF BF = 1
		LDAA		#$06				LOAD A WITH $06
		STAA		REG_0				STORE IN REG_0

HERE5		BRSET		0,X	$80	HERE5		BRANCH BACK HERE IF BF = 1
		LDAA		#$3C				LOAD A WITH $3C
		STAA		REG_0				STORE IN REG_0

HERE6 		BRSET		0,X	$80	HERE6		BRANCH BACK HERE IF BF = 1
		LDAA		#$0F				LOAD A WITH $0F
		STAA		REG_0				STORE IN REG_0

HERE7 		BRSET		0,X	$80	HERE7		BRANCH BACK HERE IF BF = 1

		RTS						ONLY RETURN IF NOT DONE WITH INITIALIZING

*******			INITIALIZATION OF PIA		     ********

PIA_INIT

***************		 INITIALIZE PIA A (X VALUES)	*************************
		LDX		#PIA_CRA		LOAD PIA CRA VALUE TO X
		BCLR		0,X %00000100		SET BIT 2 OF CRA TO 0 (ACCESS DDRA)
		LDAA		#$FF			LOAD ACC A WITH FF
		STAA		PIA_DDRA		STORE FF IN B000 (SET DDRA TO FF)
		LDX		#PIA_CRA		LOAD PIA CRA TO X
		BSET		0,X %00000100		SET BIT 2 OF CRA TO 1 (ACCESS DRA)

***************		 INITIALIZE PIA B  (Y VALUES)   *************************
		LDX		#PIA_CRB		LOAD CRB VALUE IN X
		BCLR		0,X  %00000100		SET BIT 2 OF CRB TO 0 (ACCESS DDRB)
		LDAA		#$FF			LOAD ACC A WITH FF
		LDX		#PIA_CRB		LOAD CRB VALUE IN X
		STAA		PIA_DDRB		STORE FF IN B002 (SET DDRB TO FF)
		BSET		0,X %00000100		SET BIT 2 OF CRB TO 1 (ACCESS DRB)

		JSR		DELAY			TO ENSURE COMPLETE ADPU INITIALIZAION, DELAY

* ANOTHER INITIALIZATION OF D/A AFTER AT LEAST 100us
		LDX		#ST_REG			LOAD X WITH $1030
		BSET		0,X %00100000		SET BIT 5

****************************************************************************************
*******					MAIN		     			********
****************************************************************************************`

MAIN
	LDAA		ADR_READ	LOAD A WITH A/D CONVERTER VALUE
	STAA		$E103		PROGRAM IT OUT AT $E103 (FOR THE SAKE OF LOGIC ANALYZER)
	CLR 		COUNTER		CLEAR COUNTER LOCATION
	INC 		COUNTER		STORE A 1 IN COUNTER LOCATION
	LDX 		#MODE_L		LOADING X WITH MODE_LOC
       	LDAA		COUNTER		LOAD COUNTER  IN A
       	CMPA		0,X		CHECK IF MODE IS EQUAL TO COUNTER (1 SO FAR)
       	BEQ		MAIN		IF YES BRANCH TO MAIN
       	INC		COUNTER		MAKE COUNTER 2
       	LDAA		COUNTER		LOAD 2 IN A
       	CMPA		0,X		CHECK IF MODE IS 2
       	BEQ		MODE_2 		BRANCH TO MODE 2
       	INC		COUNTER		MAKE COUNTER 3
       	LDAA		COUNTER		LOAD 3 IN A
       	CMPA		0,X		CHECK IF MODE IS 3
       	BEQ		GOMODE_3	BRANCH TO MODE 3
       	INC		COUNTER		MAKE COUNTER 4
       	LDAA		COUNTER		LOAD 4 IN A
       	CMPA		0,X		CHECK IF MODE IS 4
       	BEQ		GOMODE_4	BRANCH TO MODE 4
       	BRA 		MAIN		BRANCH TO MAIN

GOMODE_3
	JMP	MODE_3	JUMP TO MODE 3		JUMP TO MODE 3

GOMODE_4
	JMP	MODE_4	JUMP TO MODE 4 		JUMP TO MODE 4

****************************************************************************************
*******				MODE_2	    		 ********
****************************************************************************************

MODE_2

CHECKB
	LDAA		#$FF			LOADS $FF INTO ACCUMULATOR A
	CMPA		0,Y			CHECK IF VALUE IN BUFFER IS $FF
       	BEQ		MAIN			IF BUFFER CONTAINS $FF, GO BACK TO MAIN
	LDAB		0,Y			LOAD VALUE IN BUFFER INTO ACCUMULATOR B
	LDAA		#32			LOAD A WITH 32
	MUL					MULTIPLY A WITH B
	ADDD		#DIG_0			ADD WHAT IS IN D WITH THE VALUE AT LASER
	STD 		MULTLASSTR		STORE THE LOCATION AT THIS MULTLASSTR
	LDX		MULTLASSTR		LOAD IT FROM MULTLASSTR

NEXTY
       	LDAA		#$FF			LOAD #$FF INTO ACCUMULATOR A
       	CMPA		0,X			COMPARE THE Y COORDINATE TO $FF
	BEQ 		LASOFFADJ		IF TRUE, TURN OFF THE LASER
	LDAA 		#$00			LOAD #$00 INTO ACCUMULATOR A
	CMPA 		0,X			COMPARE THE Y COORDINATE TO $00
	BEQ 		LASOFFNEXTY		IF TRUE, TURN OFF THE LASER
	LDAA 		#$01			LOAD #$01 INTO ACCUMULATOR A
	CMPA		 0,X			COMPARE THE Y COORDINATE TO $01
	BEQ 		LASONNEXTY		TURN LASER ON
	JSR		DISPLAY			JUMP TO SUBROUTINE
	BRA		NEXTY			BRANCH

LASOFFNEXTY
	JSR		LASOFF			JUMP TO SUBROUTINE
	INX					INCREMENT X
	BRA		NEXTY			BRANCH TO NEXTY

LASONNEXTY
	JSR 		LASON			JUMP TO SUBROUTINE
	INX					INCREMENT X
	BRA		NEXTY			BRANCH TO NEXTY

LASOFFADJ
	JSR 		LASOFF		JUMP TO LASOFF SUBROUTINE
	BRA		ADJUSTX		BRANCH

ADJUSTX
      	LDX		#X_OFFSET	LOAD X WITH THE ADDRESS OF THE OFFSET
       	LDAA		0,X		LOAD A WITH THE VALUE IN X
	ADDA		#64		ADD 64 ON ACC VALUE
       	CMPA  		#255		COMPARE IT WITH 255
       	BLO		ADJBUFF		IF GREATER OR EQUAL GO ADJSUT BUFFER
       	LDAA		#00		LOAD A WITH 0
       	BRA		ADJBUFF		BRANCH TO ADJUST BUFFER

ADJBUFF
	STAA		0,X		RESET THE X_OFFSET
	INY				INCREMENT THE CURRENT BUFFER POINTER
	LDAA		0,Y
	CMPA		#$FF
	BEQ		RES_Y
	CPY		#$24		COMPARE IT WITH THE VALUE 24
	BLO		GOMAIN		IF LESS BRA TO MAIN
	LDY		#BUFFER		ELSE RESET IT WITH 20
	BRA		GOMAIN		AND GO BACK TO MAIN

RES_Y
	LDY		#BUFFER		ELSE RESET IT WITH 20
	CLR		X_OFFSET
	BRA		GOMAIN		AND GO BACK TO MAIN

****************************************************************************************
*******				MODE_3	    		 ********
****************************************************************************************

MODE_3

	LDX   		#MODE_3_STR		LOAD X WITH MODE_3_STR LOCATION
NEXTY_3
	LDAA		#$FF			LOAD #$FF INTO ACCUMULATOR A
        CMPA		0,X			COMPARE THE Y COORDINATE TO $FF
	BEQ 		GOOFFMAIN 		IF TRUE, TURN OFF THE LASER
	LDAA		 #$00			LOAD #$00 INTO ACCUMULATOR A
	CMPA 		0,X			COMPARE THE Y COORDINATE TO $00
	BEQ 		GOOFFNEXTY3		IF TRUE, TURN OFF THE LASER
	LDAA		 #$01			LOAD #$01 INTO ACCUMULATOR A
	CMPA 		0,X			COMPARE THE Y COORDINATE TO $01
	BEQ 		GOONNEXTY3		TURN LASER ON
	JSR 		DISPLAY			JUMP TO SUBROUTINE
	BRA		NEXTY_3			BRANCH

GOOFFMAIN
	JSR		LASOFF			JUMP TO SUBROUTINE
	BRA		GOMAIN			BRANCH

GOOFFNEXTY3
	JSR		LASOFF			JUMP TO SUBROUTINE
	INX					INCREMENT X
	BRA		NEXTY_3			BRANCH

GOONNEXTY3
	JSR		LASON			JUMP TO SUBROUTINE
	INX					INCREMENT
	BRA 		NEXTY_3			BRANCH

DISPLAY
	LDAA		0,X
	ADDA		X_OFFSET		ADD X TO OFFSET VALUE
	STAA		PIA_DDRA		STORE IT AT PIA_DDRB (AT DDRB)
	INX					INCREMENT X
	LDAA		0,X			LOAD Y VALUE
	STAA		PIA_DDRB 		STORE A AT B000
	JSR		DELAY			JUMP TO DELAY
	INX
	RTS

LASON
		LDAA		#$FF		LOAD 0 IN A
		STAA		ON		STORE IN A000 AND TURN ON
		JSR 		DELAY		JUMP TO DELAY
		RTS

LASOFF
		LDAA		#$FF		LOAD 0 IN A
		STAA		OFF		STORE IN A000 AND TURN OFF
		JSR 		DELAY		JUMP TO DELAY
		RTS

GOMAIN
		JMP MAIN			JUMP TO MAIN

DELAY
		CLR		DELCOUNT (3)		LOAD X WITH 0
		LDAA		#250

AGAIN		CMPA		DELCOUNT (3)		COMPARE 14 TO THE VAL
		BEQ 		AGAIN4 (3)		IF 14 GO RETURN
		INC		DELCOUNT (6)		INCREMENT DELAY COUNTER
		BRA		AGAIN	(3)		BRANCH AGAIN

AGAIN4		CLR		DELCOUNT (3)		LOAD X WITH 0
		LDAA		ADR_READ

AGAIN5		CMPA		DELCOUNT (3)		COMPARE 14 TO THE VAL
		BEQ 		SUBRET(3)		IF 14 GO RETURN
		INC		DELCOUNT (6)		INCREMENT DELAY COUNTER
		NOP					TO WASTE SOME CYCLES
		NOP					TO WASTE SOME CYCLES
		NOP					TO WASTE SOME CYCLES
		NOP					TO WASTE SOME CYCLES
		NOP					TO WASTE SOME CYCLES
		NOP					TO WASTE SOME CYCLES
		NOP					TO WASTE SOME CYCLES
		BRA		AGAIN5	(3)		BRANCH AGAIN

SUBRET
		RTS					RETURN FROM SUBROUTINE.

****************************************************************************************
*******				MODE_4	    		 ********
****************************************************************************************
MODE_4

	LDX   		#MODE4_PATTERN		LOAD X WITH MODE_3_STR LOCATION
NEXTY_4
	LDAA		#$FF			LOAD #$FF INTO ACCUMULATOR A
        CMPA		0,X			COMPARE THE Y COORDINATE TO $FF
	BEQ 		GOOFFMAIN 		IF TRUE, TURN OFF THE LASER
	LDAA		 #$00			LOAD #$00 INTO ACCUMULATOR A
	CMPA 		0,X			COMPARE THE Y COORDINATE TO $00
	BEQ 		GOOFFNEXTY4	IF TRUE, TURN OFF THE LASER
	LDAA		 #$01			LOAD #$01 INTO ACCUMULATOR A
	CMPA 		0,X			COMPARE THE Y COORDINATE TO $01
	BEQ 		GOONNEXTY4		TURN LASER ON
	JSR 		DISPLAY
	BRA		NEXTY_4

GOOFFNEXTY4
	JSR		LASOFF		JUMP TO SUBROUTINE
	INX					INCREMENT X
	BRA		NEXTY_4		BRANCH

GOONNEXTY4
	JSR		LASON			JUMP TO SUBROUTINE
	INX
	BRA 		NEXTY_4		BRANCH

****************************************************************************************
*******		INTERRUPT BLOCK		     ********
****************************************************************************************
ISR
	LDAB		KEYBD			READ FROM KEYBOARD
	CMPB		#18			COMPARE THE KEY VALUE TO MODE
	BEQ		MODE			GO UPDATE MODE
	CMPB		#19			ELSE COMPARE TO 19
	BEQ		SHIFT			IF EQUAL GO UPDATE SHIFT
	ADDB		SHIFT_L	           	 ELSE ADD B TO THE SHIFT VALUE
       CLR		SHIFT_L 		CLEAR SHIFT LOCATION
       LDY		#BUFFER		LOAD Y WITH BUFFER VALUE

CHECKBUF
       LDAA		#$FF			LOAD A WITH FF
	CMPA		0,Y			COMPARE A WITH WHAT IS POINTED TO BY Y
	BNE		INCBUF		BRANCH NOT EQUAL
STORE	STAB	 	0,Y			STORE THE KEY IN BUFFER
	LDX		#ASCII_TABLE		LOAD X WITH ACSCII_TABLE LOCATION
       ABX					ADD ACCUMULATOR B TO X
       LDAA		0,X			LOAD IN ACC A WHAT IS POINTED TO BY Y
HERE8 	BRSET		0,X	$80	HERE8		BRANCH BACK HERE IF BF = 1
	STAA		REG_1			STORE X AT REG_1
HERE9 	BRSET		0,X	$80	HERE9		BRANCH BACK HERE IF BF = 1
	BRA 		RETURN		BRANCH

INCBUF
	INY			 		INCREMENT Y
	CPY		#$24			COMPARE Y TO 24
	BNE 		CHECKBUF		BRANCH NOT EQUAL
	BRA		RETURN		RETURN

MODE
	LDAA		COUNTER
	STAA		$F101
	LDAA		SHIFT_L		LOAD A WITH WHAT IS IN SHIFT_L
	CMPA		#$00			COMPARE IT WITH 0
	BNE		CLEAR			BRANCH NOT EQUAL TO CLEAR
	CLR		SHIFT_L		CLEAR SHIFT_L
	INC		MODE_L		INCREMENT THE MODE IN MODE_L
	LDAA		MODE_L		LOAD THE MODE VALUE IN A
	STAA		$E100
	CMPA		#5			COMPARE THE MODE TO 5
	BNE		RETURN		IF LESS RETURN
       CLR		MODE_L		ELSE	CLEAR THE MODE
       INC		MODE_L		MAKE IT A 1
       BRA 		RETURN		BRANCH TO RETURN

SHIFT
	LDAA		SHIFT_L		LOAD A WITH THE SHIFT VALUE
	CMPA		#0			COMPARE IF IT IS 0
	BEQ		NOW20			IF 0, GO MAKE IT 20
	LDAA		#0			ELSE MAKE IT 0
	STAA		SHIFT_L		STORE THE SHIFT VALUE BACK IN THE MEM LOC
	BRA 		RETURN		GO RETURN

NOW20
	LDAA		#SHIFT_VAL		LOAD A WITH 20
	STAA		SHIFT_L		STORE THE SHIFT VALUE BACK IN SHIFT_L
	BRA 		RETURN		GO RETURN

CLEAR
	JSR		INIT_LCD
	CLR		X_OFFSET		CLEAR X_OFFSET
        CLR		SHIFT_L		CLEAR SHIFT
	LDX		#BUFFER		LOAD THE ADDRESS OF BUFFER IN X
	LDAA		#$FF			LOAD VALUE FF IN ACC A
CLRAG	STAA		0,X			STORE WHAT IS STORED IN ACC IN THE BUFFER
	INX					INCREMENT X
	CPX		#$24			COMPARE WITH THE END OF THE BUFFER
	BEQ		RETURN		RETURN
	BRA 		CLRAG			CLEAR

RETURN
	RTI					RETURN FROM THE INTERRUPT
****************************************************************************************
*******		CONCLUDING LINES OF CODE		     ********
****************************************************************************************

*******		LCDSTRING		     ********
	ORG	ASCII_TABLE
	FCB	$30, $31, $32, $33, $34,$35, $36, $37, $38, $39
	FCB	$41, $42, $43, $44, $45, $46, $47, $48, $49, $4A, $4B, $4C, $4D, $4E, $4F, $50, $51
        FCB	$52, $53, $54, $55, $56, $57, $58, $59, $5A

*******		MODE 3 LASER STRING		     ********
	ORG	MODE_3_STR			MODE_3_VECTOR
	FCB	5,5,01,5,251,251,251,251,5,5,5,251,251,00,05,251,01,251,5,00,$FF

	ORG	$FFF2	INTERRUPT VECTOR
	FDB	ISR				FORM INTERRUPT VECTOR BYTE
	ORG	$FFFE	MOVES ASSEMBLER OUTPUT LOCATION TO $FFFE (FOR HARDWARE)
	FDB	$E000	FORMS RESET VECTOR FOR HARDWARE

	ORG 	DIG_0
	FCB	$B	X
	FCB	$A	Y
	FCB	$01	ON
	FCB	$B	X
	FCB	$FC	Y
	FCB	$3C	X
	FCB	$FC	Y
	FCB	$3C	X
	FCB	$A	Y
	FCB	$B	X
	FCB	$A	Y
	FCB	$00	OFF
	FCB	$FF    END

	ORG  DIG_1
	FCB	$9	X
	FCB	$9C	Y
	FCB	$01	ON
	FCB	$3C	X
	FCB	$FA	Y
	FCB	$3C	X
	FCB	$D	Y
	FCB	$00	OFF
	FCB	$FF    END

	ORG    DIG_2
	FCB	$E	X
	FCB	$B6	Y
	FCB	$01	ON
	FCB	$9	X
	FCB	$CF	Y
	FCB	$10	X
	FCB	$E2	Y
	FCB	$24	X
	FCB	$EF	Y
	FCB	$2E	X
	FCB	$F2	Y
	FCB	$38	X
	FCB	$E3	Y
	FCB	$3C	X
	FCB	$C6	Y
	FCB	$3C	X
	FCB	$AF	Y
	FCB	$35	X
	FCB	$9E	Y
	FCB	$2B	X
	FCB	$7F	Y
	FCB	$6	X
	FCB	$14	Y
	FCB	$3C	X
	FCB	$15	Y
	FCB	$00	OFF
	FCB	$FF    END

	ORG    DIG_3
	FCB	$C	X
	FCB	$C0	Y
	FCB	$01	ON
	FCB	$F	X
	FCB	$E0	Y
	FCB	$25	X
	FCB	$EA	Y
	FCB	$36	X
	FCB	$DE	Y
	FCB	$3B	X
	FCB	$B5	Y
	FCB	$35	X
	FCB	$8A	Y
	FCB	$20	X
	FCB	$7B	Y
	FCB	$33	X
	FCB	$62	Y
	FCB	$3A	X
	FCB	$54	Y
	FCB	$3B	X
	FCB	$38	Y
	FCB	$36	X
	FCB	$21	Y
	FCB	$23	X
	FCB	$C	Y
	FCB	$10	X
	FCB	$15	Y
	FCB	$D	X
	FCB	$32	Y
	FCB	$00	OFF
	FCB	$FF    END

	ORG    DIG_4
	FCB	$3C	X
	FCB	$EE	Y
	FCB	$01	ON
	FCB	$7	X
	FCB	$55	Y
	FCB	$3C	X
	FCB	$55	Y
	FCB	$3D	X
	FCB	$EC	Y
	FCB	$3C	X
	FCB	$9	Y
	FCB	$00	OFF
	FCB	$FF    END

	ORG    DIG_5
	FCB	$3A	X
	FCB	$F3	Y
	FCB	$01	ON
	FCB	$A	X
	FCB	$F3	Y
	FCB	$9	X
	FCB	$99	Y
	FCB	$19	X
	FCB	$95	Y
	FCB	$2B	X
	FCB	$8B	Y
	FCB	$39	X
	FCB	$7B	Y
	FCB	$3C	X
	FCB	$49	Y
	FCB	$37	X
	FCB	$3A	Y
	FCB	$29	X
	FCB	$23	Y
	FCB	$1E	X
	FCB	$1B	Y
	FCB	$13	X
	FCB	$11	Y
	FCB	$B	X
	FCB	$11	Y
	FCB	$00	OFF
	FCB	$FF    END

	ORG    DIG_6
	FCB	$3A	X
	FCB	$E2	Y
	FCB	$01	ON
	FCB	$18	X
	FCB	$B0	Y
	FCB	$8	X
	FCB	$5B	Y
	FCB	$8	X
	FCB	$E	Y
	FCB	$3A	X
	FCB	$E	Y
	FCB	$3A	X
	FCB	$60	Y
	FCB	$9	X
	FCB	$5F	Y

	FCB	$00	OFF
	FCB	$FF    END

	ORG    DIG_7
	FCB	$8	X
	FCB	$F0	Y
	FCB	$01	ON
	FCB	$3D	X
	FCB	$F0	Y
	FCB	$D	X
	FCB	$F	Y
	FCB	$00	OFF
	FCB	$FF    END

	ORG    DIG_8
	FCB	$1F	X
	FCB	$7C	Y
	FCB	$01	ON
	FCB	$39	X
	FCB	$B1	Y
	FCB	$3B	X
	FCB	$D5	Y
	FCB	$1A	X
	FCB	$FA	Y
	FCB	$3	X
	FCB	$C6	Y
	FCB	$3A	X
	FCB	$4D	Y
	FCB	$25	X
	FCB	$F	Y
	FCB	$4	X
	FCB	$48	Y
	FCB	$1F	X
	FCB	$81	Y
	FCB	$00	OFF
	FCB	$FF    END

	ORG    DIG_9
	FCB	$3A	X
	FCB	$FA	Y
	FCB	$01	ON
	FCB	$B	X
	FCB	$FA	Y
	FCB	$B	X
	FCB	$AD	Y
	FCB	$3C	X
	FCB	$AD	Y
	FCB	$3C	X
	FCB	$F9	Y
	FCB	$3D	X
	FCB	$12	Y
	FCB	$D	X
	FCB	$12	Y
	FCB	$00	OFF
	FCB	$FF    END

	ORG    LET_A
	FCB	$4	X
	FCB	$4	Y
	FCB	$01	ON
	FCB	$1E	X
	FCB	$F9	Y
	FCB	$3D	X
	FCB	$3	Y
	FCB	$00      OFF
	FCB	$11	X
	FCB	$76	Y
	FCB	$01	ON
	FCB	$2E	X
	FCB	$77	Y
	FCB	$00	OFF
	FCB	$FF    END

	ORG    LET_B
	FCB	$9	X
	FCB	$9	Y
	FCB	$01	ON
	FCB	$A	X
	FCB	$F2	Y
	FCB	$3A	X
	FCB	$F0	Y
	FCB	$38	X
	FCB	$9B	Y
	FCB	$30	X
	FCB	$8C	Y
	FCB	$B	X
	FCB	$72	Y
	FCB	$19	X
	FCB	$64	Y
	FCB	$34	X
	FCB	$52	Y
	FCB	$39	X
	FCB	$9	Y
	FCB	$9	X
	FCB	$7	Y
	FCB	$00	OFF
	FCB	$FF    END

	ORG    LET_C
	FCB	$3C	X
	FCB	$F9	Y
	FCB	$01	ON
	FCB	$21	X
	FCB	$E4	Y
	FCB	$19	X
	FCB	$D8	Y
	FCB	$E	X
	FCB	$BE	Y
	FCB	$C	X
	FCB	$AA	Y
	FCB	$A	X
	FCB	$93	Y
	FCB	$9	X
	FCB	$6F	Y
	FCB	$9	X
	FCB	$39	Y
	FCB	$13	X
	FCB	$2E	Y
	FCB	$1E	X
	FCB	$20	Y
	FCB	$26	X
	FCB	$19	Y
	FCB	$3D	X
	FCB	$C	Y
	FCB	$00	OFF
	FCB	$FF    END

	ORG    LET_D
	FCB	$9	X
	FCB	$8	Y
	FCB	$01	ON
	FCB	$A	X
	FCB	$F8	Y
	FCB	$28	X
	FCB	$F1	Y
	FCB	$31	X
	FCB	$E7	Y
	FCB	$38	X
	FCB	$D3	Y
	FCB	$3A	X
	FCB	$BB	Y
	FCB	$3C	X
	FCB	$A7	Y
	FCB	$3C	X
	FCB	$70	Y
	FCB	$3C	X
	FCB	$4E	Y
	FCB	$3C	X
	FCB	$38	Y
	FCB	$31	X
	FCB	$23	Y
	FCB	$24	X
	FCB	$13	Y
	FCB	$8	X
	FCB	$9	Y
	FCB	$00	OFF
	FCB	$FF    END

	ORG    LET_E
	FCB	$3C	X
	FCB	$FA	Y
	FCB	$01	ON
	FCB	$6	X
	FCB	$F9	Y
	FCB	$8	X
	FCB	$00	OFF
	FCB	$A	Y
	FCB	$3D	X
	FCB	$01	ON
	FCB	$9	Y
	FCB	$8	X
	FCB	$83	Y
	FCB	$3C	X
	FCB	$81	Y
	FCB	$00	OFF
	FCB	$FF	END

	ORG    LET_F
	FCB	$6	X
	FCB	$9	Y
	FCB	$01	ON
	FCB	$8	X
	FCB	$F9	Y
	FCB	$3A	X
	FCB	$F9	Y
	FCB	$00	OFF
	FCB	$7	X
	FCB	$78	Y
	FCB	$01	ON
	FCB	$3D	X
	FCB	$77	Y
	FCB	$00	OFF
	FCB	$FF	END

	ORG    LET_G
	FCB	$3C	X
	FCB	$F9	Y
	FCB	$01	ON
	FCB	$7	X
	FCB	$F9	Y
	FCB	$9	X
	FCB	$9	Y
	FCB	$3C	X
	FCB	$9	Y
	FCB	$3C	X
	FCB	$6D	Y
	FCB	$15	X
	FCB	$6F	Y
	FCB	$00	OFF
	FCB	$FF	END

	ORG    LET_H
	FCB	$7	X
	FCB	$F8	Y
	FCB	$01	ON
	FCB	$7	X
	FCB	$A	Y
	FCB	$00	OFF
	FCB	$3B	X
	FCB	$FB	Y
	FCB	$01	ON
	FCB	$3D	X
	FCB	$B	Y
	FCB	$00	OFF
	FCB	$8	X
	FCB	$89	Y
	FCB	$01	ON
	FCB	$3C	X
	FCB	$8A	Y
	FCB	$00	OFF
	FCB 	$FF	END

	ORG    LET_I
	FCB	$28	X
	FCB	$C	Y
	FCB	$01	ON
	FCB	$29	X
	FCB	$F6	Y
	FCB	$00	OFF
	FCB	$FF	END

	ORG    LET_J
	FCB	$22	X
	FCB	$FB	Y
	FCB	$01
	FCB	$3C	X
	FCB	$FA	Y
	FCB	$3C	X
	FCB	$C	Y
	FCB	$A	X
	FCB	$C	Y
	FCB	$A	X
	FCB	$4F	Y
	FCB	$28	X
	FCB	$4F	Y
	FCB	$28	X
	FCB	$30	Y
	FCB	$00	OFF
	FCB	$FF	END

	ORG    LET_K
	FCB	$14	X
	FCB	$F9	Y
	FCB	$01	ON
	FCB	$14	X
	FCB	$C	Y
	FCB	$00	OFF
	FCB	$3B	X
	FCB	$F9	Y
	FCB	$01	ON
	FCB	$15	X
	FCB	$8D	Y
	FCB	$3A	X
	FCB	$C	Y
	FCB	$00	OFF
	FCB	$FF	END

	ORG    LET_L
	FCB	$6	X
	FCB	$F8	Y
	FCB	$01	ON
	FCB	$6	X
	FCB	$C	Y
	FCB	$3E	X
	FCB	$C	Y
	FCB	$00	OFF
	FCB	$FF	END

	ORG    LET_M
	FCB	$7	X
	FCB	$C	Y
	FCB	$01	ON
	FCB	$7	X
	FCB	$F9	Y
	FCB	$1F	X
	FCB	$8F	Y
	FCB	$3C	X
	FCB	$F8	Y
	FCB	$3C	X
	FCB	$9	Y
	FCB	$00	OFF
	FCB	$FF	END

	ORG    LET_N
	FCB	$7	X
	FCB	$9	Y
	FCB	$01	ON
	FCB	$7	X
	FCB	$F9	Y
	FCB	$3B	X
	FCB	$C	Y
	FCB	$3C	X
	FCB	$F5	Y
	FCB	$00	OFF
	FCB	$FF	END

	ORG    LET_O
	FCB	$22	X
	FCB	$6	Y
	FCB	$01	ON
	FCB	$6	X
	FCB	$43	Y
	FCB	$4	X
	FCB	$7E	Y
	FCB	$10	X
	FCB	$DA	Y
	FCB	$27	X
	FCB	$F6	Y
	FCB	$3A	X
	FCB	$B2	Y
	FCB	$3E	X
	FCB	$84	Y
	FCB	$3C	X
	FCB	$58	Y
	FCB	$22	X
	FCB	$8	Y
	FCB	$00	OFF
	FCB	$FF	END

	ORG    LET_P

	FCB	$8	X
	FCB	$A	Y
	FCB	$01	ON
	FCB	$9	X
	FCB	$F3	Y
	FCB	$3C	X
	FCB	$F3	Y
	FCB	$3D	X
	FCB	$94	Y
	FCB	$A	X
	FCB	$95	Y
	FCB	$00	OFF
	FCB	$FF	END

	ORG    LET_Q
	FCB	$22	X
	FCB	$6	Y
	FCB	$6	X
	FCB	$43	Y
	FCB	$4	X
	FCB	$7E	Y
	FCB	$10	X
	FCB	$DA	Y
	FCB	$27	X
	FCB	$F6	Y
	FCB	$3A	X
	FCB	$B2	Y
	FCB	$3E	X
	FCB	$84	Y
	FCB	$3C	X
	FCB	$58	Y

	FCB	$22	X
	FCB	$8	Y
	FCB	$00	OFF
	FCB	$22	X
	FCB	$44	Y
	FCB	$01	ON
	FCB	$31	X
	FCB	$13	Y
	FCB	$3B	X
	FCB	$8	Y
	FCB	$00	OFF
	FCB	$FF	END

	ORG    LET_R
	FCB	$9	X
	FCB	$A	Y
	FCB	$01	OFF
	FCB	$7	X
	FCB	$FA	Y
	FCB	$28	X
	FCB	$F9	Y
	FCB	$34	X
	FCB	$D2	Y
	FCB	$29	X
	FCB	$B4	Y
	FCB	$8	X
	FCB	$B4	Y
	FCB	$33	X
	FCB	$A	Y
	FCB	$00	OFF
	FCB	$FF	END

	ORG    LET_S
	FCB	$3A	X
	FCB	$C7	Y
	FCB	$01	ON
	FCB	$21	X
	FCB	$F4	Y
	FCB	$A	X
	FCB	$C3	Y
	FCB	$6	X
	FCB	$8D	Y
	FCB	$21	X
	FCB	$72	Y
	FCB	$3A	X
	FCB	$61	Y
	FCB	$38	X
	FCB	$10	Y
	FCB	$9	X
	FCB	$D	Y
	FCB	$8	X
	FCB	$32	Y
	FCB	$00	OFF
	FCB	$FF	END

	ORG    LET_T
	FCB	$4	X
	FCB	$FA	Y
	FCB	$01      ON
	FCB	$3C	X
	FCB	$FA	Y
	FCB	$00      OFF
	FCB	$1F	X
	FCB	$FA	Y
	FCB	$01      ON
	FCB	$1F	X
	FCB	$9	Y
	FCB	$00      OFF
	FCB	$FF      END

	ORG    LET_U
	FCB	$3	X
	FCB	$FA	Y
	FCB	$01      ON
	FCB	$5	X
	FCB	$A	Y
	FCB	$3B	X
	FCB	$A	Y
	FCB	$3B	X
	FCB	$FA	Y
	FCB	$00      OFF
	FCB	$FF      END

	ORG    LET_V
	FCB	$4	X
	FCB	$FA	Y
	FCB	$01      ON
	FCB	$1F	X
	FCB	$7	Y
	FCB	$3B	X
	FCB	$FA	Y
	FCB	$00      OFF
	FCB	$FF      END

	ORG    LET_W
	FCB	$5	X
	FCB	$FA	Y
	FCB	$01      ON
	FCB	$D	X
	FCB	$9	Y
	FCB	$1F	X
	FCB	$75	Y
	FCB	$2E	X
	FCB	$9	Y
	FCB	$3C	X
	FCB	$F9	Y
	FCB	$00      OFF
	FCB	$FF      END

	ORG    LET_X
	FCB	$6	X
	FCB	$9	Y
	FCB	$01      ON
	FCB	$39	X
	FCB	$F9	Y
	FCB	$00      OFF
	FCB	$6	X
	FCB	$F9	Y
	FCB	$01      ON
	FCB	$3A	X
	FCB	$9	Y
	FCB	$01      OFF
	FCB	$FF      END

	ORG    LET_Y
	FCB	$6	X
	FCB	$F9	Y
	FCB	$01      ON
	FCB	$20	X
	FCB	$80	Y
	FCB	$00      OFF
	FCB	$3B	X
	FCB	$F8	Y
	FCB	$01     ON
	FCB	$A	X
	FCB	$1E	Y
	FCB	$00      OFF
	FCB	$FF     	END

	ORG    LET_Z
	FCB	$6	X
	FCB	$FA	Y
	FCB	$01      ON
	FCB	$3C	X
	FCB	$F9	Y
	FCB	$7	X
	FCB	$5	Y
	FCB	$3D	X
	FCB	$4	Y
	FCB	$00      OFF
	FCB	$FF      END

	ORG	MODE4_PATTERN
	FCB	$71	X
	FCB	$75	Y
	FCB	$01	ON
	FCB	$7C	X
	FCB	$75	Y
	FCB	$7D	X
	FCB	$81	Y
	FCB	$72	X
	FCB	$81	Y
	FCB	$69	X
	FCB	$83	Y
	FCB	$6A	X
	FCB	$65	Y
	FCB	$89	X
	FCB	$64	Y
	FCB	$8A	X
	FCB	$91	Y
	FCB	$5E	X
	FCB	$92	Y
	FCB	$5F	X
	FCB	$58	Y
	FCB	$93	X
	FCB	$56	Y
	FCB	$94	X
	FCB	$9E	Y
	FCB	$52	X
	FCB	$A0	Y
	FCB	$53	X
	FCB	$48	Y
	FCB	$AE	X
	FCB	$48	Y
	FCB	$AE	X
	FCB	$B3	Y
	FCB	$3D	X
	FCB	$B4	Y
	FCB	$3E	X
	FCB	$2E	Y
	FCB	$C2	X
	FCB	$2E	Y
	FCB	$C3	X
	FCB	$C5	Y
	FCB	$33	X
	FCB	$C7	Y
	FCB	$33	X
	FCB	$1A	Y
	FCB	$D5	X
	FCB	$1A	Y
	FCB	$D6	X
	FCB	$DF	Y
	FCB	$26	X
	FCB	$DE	Y
	FCB	$24	X
	FCB	$E	Y
	FCB	$E4	X
	FCB	$F	Y
	FCB	$E9	X
	FCB	$EF	Y
	FCB	$12	X
	FCB	$F0	Y
	FCB	$12	X
	FCB	$E	Y
	FCB	$00	OFF
	FCB	$FF    END

****************************************************************************************
*******				       END				********
****************************************************************************************
